import streamlit as st
import openai
import base64
import tempfile
import fitz  # PyMuPDF
from PIL import Image
import os

st.set_page_config(page_title="IA Contratos P칰blicos OCR", page_icon="游늯")
st.title("游늯 An치lisis de Contratos de la Administraci칩n P칰blica con GPT-4o Vision")

st.markdown("""
Sube cualquier contrato de la administraci칩n p칰blica (PDF, aunque sea escaneado como imagen).  
La IA extrae texto, identifica y **consolida los elementos legales m치s importantes** (partes, objeto, monto, plazo, garant칤as, penalizaciones, etc.).

**Necesitas tu clave de API de [OpenAI](https://platform.openai.com/api-keys)** (solo se usa localmente, nunca se almacena).
""")

st.warning("丘멆잺 Esta app funciona con contratos PDF, sean digitales o escaneados. El procesamiento de escaneos puede ser m치s lento y consumir m치s cr칠ditos de tu API Key.")

api_key = st.text_input("Introduce tu clave OpenAI API", type="password")
uploaded_file = st.file_uploader("Sube tu contrato en PDF", type=["pdf"])

if uploaded_file and api_key:
    openai.api_key = api_key

    with tempfile.NamedTemporaryFile(delete=False, suffix=".pdf") as tmp:
        tmp.write(uploaded_file.read())
        tmp_path = tmp.name

    st.info("Convirtiendo p치ginas del PDF a im치genes...")

    doc = fitz.open(tmp_path)
    all_texts = []

    progress_bar = st.progress(0)
    for i, page in enumerate(doc):
        st.write(f"Procesando p치gina {i + 1} de {len(doc)}...")

        # Convierte la p치gina a PNG (춰no requiere dependencias del sistema!)
        pix = page.get_pixmap(dpi=300)
        img_bytes = pix.tobytes("png")

        img_base64 = base64.b64encode(img_bytes).decode('utf-8')

        # Llama a Vision: extrae TODO el texto relevante
        messages = [
            {"role": "system", "content": "Eres un experto en contratos p칰blicos y OCR legal."},
            {"role": "user", "content": [
                {"type": "text", "text": "Lee la imagen adjunta de un contrato, extrae todo el texto 칰til y, si detectas informaci칩n de partes, objeto, monto, plazo, garant칤as, obligaciones, penalizaciones, modificaciones, normatividad aplicable, resoluci칩n de controversias, firmas o anexos, ind칤calo claramente. No agregues explicaciones, solo texto estructurado."},
                {"type": "image_url", "image_url": {"url": f"data:image/png;base64,{img_base64}"}}
            ]}
        ]
        response = openai.chat.completions.create(
            model="gpt-4o",
            messages=messages,
            max_tokens=2048,
        )
        page_text = response.choices[0].message.content
        all_texts.append(page_text)
        progress_bar.progress((i+1)/len(doc))

    st.success("춰OCR completado en todas las p치ginas!")

    # Muestra (opcionalmente) el texto extra칤do de cada p치gina:
    with st.expander("Ver texto extra칤do de cada p치gina"):
        for idx, txt in enumerate(all_texts):
            st.markdown(f"**P치gina {idx+1}:**\n\n{txt}\n---")

    st.info("Consolidando todos los elementos legales con IA...")

    # Junta todos los textos y consolida
    full_text = "\n\n".join(all_texts)
    prompt_final = (
        "A continuaci칩n tienes el texto relevante extra칤do de todas las p치ginas de un contrato de la administraci칩n p칰blica mexicana. "
        "Unifica y estructura en una sola lista los ELEMENTOS M츼S IMPORTANTES del contrato (partes, objeto, monto, plazo, garant칤as, obligaciones, supervisi칩n, penalizaciones, modificaciones, normatividad aplicable, resoluci칩n de controversias, firmas y anexos). "
        "Si alg칰n elemento aparece disperso o repetido, fusi칩nalo en uno solo, lo m치s completo posible. Si falta, ind칤calo como 'NO LOCALIZADO'. "
        "Responde SOLO con la lista estructurada en markdown, para f치cil lectura o copia. Aqu칤 est치 el texto:\n\n"
        + full_text
    )

    response_final = openai.chat.completions.create(
        model="gpt-4o",
        messages=[
            {"role": "system", "content": "Eres un experto en contratos p칰blicos. Devuelve la lista estructurada y consolidada, sin duplicados."},
            {"role": "user", "content": prompt_final}
        ],
        max_tokens=4096,
    )
    resultado = response_final.choices[0].message.content

    st.success("춰Lista consolidada generada!")
    st.markdown("### Elementos legales consolidados:")
    st.markdown(resultado)

    st.download_button(
        "Descargar resultado (Markdown)",
        data=resultado,
        file_name="elementos_legales_contrato.md",
        mime="text/markdown"
    )

else:
    st.info("Sube un PDF y tu clave de OpenAI para comenzar.")
